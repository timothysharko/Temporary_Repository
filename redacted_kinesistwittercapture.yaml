Description: AWS Cloud Formation Template for Social Media Analytics
Parameters:
  ApplicationName:
    Default: Strategy-Planning-Research
    Type: String
    Description: Name of the application deploying for the Social Media Analytics
  TwitterAuthAccessTokenSecret:
    Default: Redacted
    Type: String
    Description: Access Token Secret for calling twitter
  TwitterTermList:
    Default: '''#Breaking'''
    Type: String
    Description: List of terms for twitter to listen to
  VpcCIDR:
    Default: 10.193.0.0/16
    Type: String
    Description: Please enter the IP range (CIDR notation) for this VPC
  TwitterLanguages:
    Default: '''en'', ''no'', ''de'', ''fr'', ''ru'', ''uk'''
    Type: String
    Description: List of languages to use for the twitter streaming reader
  InstanceKeyName:
    Default: EMR
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: >-
      The name of the private key file to use for SSH/RDP access.  You shouldn't
      need to do any SSH access, but just in case.
  TwitterAuthAccessToken:
    Default: Redacted
    Type: String
    Description: Access Token Secret for calling twitter
  TwitterAuthConsumerSecret:
    Default: Redacted
    Type: String
    Description: Consumer Secret for access twitter
  PublicSubnet1CIDR:
    Default: 10.193.10.0/24
    Type: String
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      first Availability Zone
  TwitterAuthConsumerKey:
    Default: Redacted
    Type: String
    Description: Consumer key for access twitter
AWSTemplateFormatVersion: 2010-09-09
Outputs:
  S3ConsoleURL:
    Description: URL to the Lambda Function console
    Value: !Join 
      - ''
      - - 'https://s3.console.aws.amazon.com/s3/buckets/'
        - !Ref TweetsBucket
        - /?region=
        - !Ref 'AWS::Region'
        - '&tab=overview'
  TwitterSentimentLocation:
    Description: S3 Twitter Sentiment location.
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref TweetsBucket
        - /sentiment/
  TwitterRawLocation:
    Description: S3 Twitter Raw location.
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref TweetsBucket
        - /raw/
  LambdaFunctionConsoleURL:
    Description: URL to the Lambda Function console
    Value: !Join 
      - ''
      - - 'https://console.aws.amazon.com/lambda/home?region='
        - !Ref 'AWS::Region'
        - '#/functions/'
        - !Ref SocialMediaAnalyticsLambda
        - '?tab=graph'
  TwitterEntitiesLocation:
    Description: S3 Twitter Entities location.
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref TweetsBucket
        - /entities/
  SSHCommand:
    Description: >-
      To establish an SSH tunnel with the twitter stream reader, type the
      following command.
    Value: !Join 
      - ''
      - - ssh -i ~/
        - !Ref InstanceKeyName
        - .pem ec2-user@
        - !GetAtt 
          - TwitterStreamingReaderServer
          - PublicDnsName
  EC2InstanceConsoleURL:
    Description: url to ec2 EC2InstanceConsoleURL
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref 'AWS::Region'
        - .console.aws.amazon.com/ec2/home?region=
        - !Ref 'AWS::Region'
        - '#Instances:search='
        - !Ref TwitterStreamingReaderServer
Resources:
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ApplicationName} Public Routes'
  TwitterStreamingReaderServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      UserData: !Base64 
        'Fn::Sub':
          - >
            #!/bin/bash -ex

            set -e


            sleep 60


            yum clean all


            yum -y install nodejs npm --enablerepo=epel


            npm config set registry http://registry.npmjs.org/


            npm install node-sass request@2.81.0


            echo "var twitter_config = module.exports = {

            twitter: {
                consumer_key: '${TwitterConsumerKey}',
                consumer_secret: '${TwitterConsumerSecret}',
                access_token: '${TwitterAccessToken}',
                access_token_secret: '${TwitterTokenSecret}'
              },
            topics: [${TwitterTerms}],

            languages: [${TwitterLanguages}],

            kinesis_delivery: '${KinesisIngestionFirehose}'

            }" > /home/ec2-user/twitter_reader_config.js


            wget
            https://s3.amazonaws.com/serverless-analytics/SocialMediaAnalytics-blog/SocialAnalyticsReader.tar


            tar --warning=no-unknown-keyword -xf SocialAnalyticsReader.tar -C
            /home/ec2-user/


            echo "Service started."
          - TwitterConsumerKey: !Ref TwitterAuthConsumerKey
            TwitterTokenSecret: !Ref TwitterAuthAccessTokenSecret
            TwitterLanguages: !Ref TwitterLanguages
            TwitterTerms: !Ref TwitterTermList
            TwitterAccessToken: !Ref TwitterAuthAccessToken
            KinesisIngestionFirehose: !Ref IngestionFirehoseStream
            TwitterConsumerSecret: !Ref TwitterAuthConsumerSecret
      IamInstanceProfile: !Ref TwitterStreamingInstanceProfile
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref ApplicationName
              - DeployGroup
              - !Ref 'AWS::Region'
        - Key: Project
          Value: !Join 
            - '-'
            - - !Ref ApplicationName
              - !Ref 'AWS::Region'
      ImageId: !FindInMap 
        - AmazonLinuxAMI
        - !Ref 'AWS::Region'
        - AMI
      KeyName: !Ref InstanceKeyName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref TweetsEC2SecurityGroup
      InstanceType: t2.medium
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
    DependsOn: InternetGatewayAttachment
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ApplicationName} Public Subnet (AZ1)'
  IngestionFirehoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
            Principal:
              Service: firehose.amazonaws.com
  SocialMediaAnalyticLambdaFuntionLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      Policies:
        - PolicyName: SocialMediaAnalyticLambdaFuntionExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
                Effect: Allow
                Sid: CloudWatchAccess
              - Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt 
                    - TweetsBucket
                    - Arn
                  - !Join 
                    - ''
                    - - !GetAtt 
                        - TweetsBucket
                        - Arn
                      - /*
                Effect: Allow
                Sid: S3Access
              - Action:
                  - 'firehose:ListDeliveryStreams'
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Resource:
                  - !GetAtt 
                    - SentimentFirehoseStream
                    - Arn
                  - !GetAtt 
                    - EntitiesFirehoseStream
                    - Arn
                Effect: Allow
                Sid: FirehoseAccess
              - Action:
                  - 'comprehend:DetectEntities'
                  - 'comprehend:DetectSentiment'
                Resource: '*'
                Effect: Allow
                Sid: ComprehendAccess
              - Action:
                  - 'translate:TranslateText'
                Resource: '*'
                Effect: Allow
                Sid: TranslateAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  EntitiesFirehoseStream:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt 
          - IngestionFirehoseRole
          - Arn
        CompressionFormat: UNCOMPRESSED
        Prefix: entities/
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref TweetsBucket
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
  IngestionFirehoseStream:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt 
          - IngestionFirehoseRole
          - Arn
        CompressionFormat: UNCOMPRESSED
        Prefix: raw/
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref TweetsBucket
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
  TwitterStreamingInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref SocialMediaAnalyticsEC2Role
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ApplicationName
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: true
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref ApplicationName
  TweetsBucket:
    Type: 'AWS::S3::Bucket'
  SentimentFirehoseStream:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt 
          - IngestionFirehoseRole
          - Arn
        CompressionFormat: UNCOMPRESSED
        Prefix: sentiment/
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref TweetsBucket
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
  IngestionFirehosePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: TweetIngestionFirehosePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref TweetsBucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref TweetsBucket
                  - /*
            Effect: Allow
          - Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
            Resource:
              - 'arn:aws:logs:*:*:*'
            Effect: Allow
      Roles:
        - !Ref IngestionFirehoseRole
  TweetsEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - ToPort: '22'
          IpProtocol: tcp
          FromPort: '22'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      GroupDescription: Security Group for EC2 Twitter Reader
      Tags:
        - Key: Name
          Value: TweetsEC2SecurityGroup
        - Key: ResourceGroup
          Value: CloudFormationResource
        - Key: Project
          Value: !Join 
            - '-'
            - - !Ref ApplicationName
              - !Ref 'AWS::Region'
  SocialMediaAnalyticsEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      Policies:
        - PolicyName: socialmedia-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'firehose:DeleteDeliveryStream'
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                  - 'firehose:UpdateDestination'
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
  SocialMediaAnalyticsLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: serverless-analytics
        S3Key: SocialMediaAnalytics-blog/SocialMediaLambdaFunction.zip
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      MemorySize: 256
      Environment:
        Variables:
          ENTITY_STREAM: !Ref EntitiesFirehoseStream
          SENTIMENT_STREAM: !Ref SentimentFirehoseStream
      Handler: index.handler
      Role: !GetAtt 
        - SocialMediaAnalyticLambdaFuntionLambdaRole
        - Arn
      Timeout: 300
      Runtime: nodejs6.10
Mappings:
  AmazonLinuxAMI:
    us-west-1:
      AMI: ami-327f5352
    eu-west-1:
      AMI: ami-d7b9a2b1
    ap-northeast-2:
      AMI: ami-e21cc38c
    us-east-2:
      AMI: ami-8a7859ef
    ap-southeast-2:
      AMI: ami-10918173
    sa-east-1:
      AMI: ami-87dab1eb
    ap-southeast-1:
      AMI: ami-77af2014
    ca-central-1:
      AMI: ami-a7aa15c3
    us-east-1:
      AMI: ami-a4c7edb2
    us-west-2:
      AMI: ami-6df1e514
    ap-south-1:
      AMI: ami-47205e28
    eu-central-1:
      AMI: ami-82be18ed
    ap-northeast-1:
      AMI: ami-3bd3c45c
    eu-west-2:
      AMI: ami-ed100689
